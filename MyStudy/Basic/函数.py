'''
函数的创建和调用
什么是函数？ 函数是执行特定任务和以完成特定功能的一段代码
为什么需要函数？ 复用代码、隐藏实现细节、提高可维护性、提高可读性便于调试
函数的创建：    def 函数名 （[输入参数]）:
                 函数体
                 [return xxx]
'''
#形参是在函数的定义处
def jiafa(A,B):
    C=A+B
    return C
'''
传递方式 ：
1. 根据对应位置进行传递 
2.根据形参名进行传递(可以不按照顺序来写)
'''
#根据位置对形参传递实参
result1=jiafa(10,20)
#根据参数名对形参传递实参
result2=jiafa(A=1,B=2)
print(result1,result2)

def fun(arg1,arg2):
    print('arg1=',arg1)
    print('arg2=',arg2)
    arg1=100
    arg2.append(10)
    print('arg1=', arg1)
    print('arg2=', arg2)
n1=10
n2=[22,33,44]
print('n1',n1)
print('n2',n2)
fun(n1,n2)  #将位置传参，实参和形参名称可以不一致
print(n1)
print(n2)
'''在函数的调用过程中，进行参数的传递
如果是不可变对象，在函数体内的修改不会影响实参的值，arg1修改为100，不会影响n1的值
如果是可变对象，在函数体内的修改会影响实参的值，arg2修改为，append(10)，会影响到n2的值
'''

'''函数的返回值
如果函数没有返回值(函数执行完毕之后，不需要给调用处提供数据)，return 可以不用写
如果函数返回值是一个，直接返回原来的类型(原来是int就返回int，原来是lst就返回lst)
如果函数返回值是多个，那么返回结果为元组
'''
def fun1(lst):
    odd=[]
    even=[]
    for i in lst:
        if i%2:
         odd.append(i)
        else:
         even.append(i)
    return  odd,even
result3=fun1([22,23,25,28,30,32,33])
print(result3)  #由于返回值是多个，结果返回类型为元组

'''函数的参数定义
函数定义默认值的参数，函数定义时，给形参设定默认参数，只有与默认值不符的时候才需要传递实参
'''
def fun2(a,b=20):
    print(a,b)
print(fun2(100))
print(fun2(30,40))

'''
***个数可变的位置参数(个数可变的位置参数之能一个)
1.定义函数时，可能无法事先确定传递的位置实参的个数，使用可变的位置参数
2.使用*定义个数可变的位置形参
3.结果输出为元组
def fun(*arg):
  print(args)
fun(10)
fun(10,20,30)

***个数可变的关键字形参(个数可变的关键字参数只能一个)
1.定义函数时，无法事先确定传递的关键字实参的格个数，使用可变的关键字形参
2.使用**定义个数可变的关键字形参
3.输出结果为字典
def fun(**args):
   print(args)
fun(a=10)
fun(a=10,b=20,c=30)

在一个函数的定义过程中，既有个数可变的位置参数又有个数可变的关键字参数
要求：位置形参放在关键字形参之前
'''


